<Project Sdk="Microsoft.NET.Sdk">
    <Sdk Name="Microsoft.DotNet.PackageValidation" Version="1.0.0-preview.7.21379.12" />

    <PropertyGroup>
        <TargetFramework>netstandard2.0</TargetFramework>
        <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
        <LangVersion>10.0</LangVersion>
        <nullable>enable</nullable>
        <GenerateDocumentationFile>true</GenerateDocumentationFile>
        <Configurations>Debug;Release</Configurations>
        <!-- Note: Update PackageValidationBaselineVersion when updating this  -->
        <Version>3.5.0</Version>
    </PropertyGroup>

    <PropertyGroup Label="Package properties">
        <Authors>Morten Nielsen, Alan Singfield</Authors>
        <Description>Allows you to use SQL Server spatial SqlHierarchy types on a machine without SQL Server installed and decode these UDT types in any .NET Standard client</Description>
        <PackageTags>SqlGeometry, SqlGeography, SqlHierarchy, SqlServer, UDT</PackageTags>
        <RepositoryUrl>https://github.com/alansingfield/Microsoft.SqlServer.Types</RepositoryUrl>
        <RepositoryType>git</RepositoryType>
        <PackageProjectUrl>https://github.com/alansingfield/Microsoft.SqlServer.Types</PackageProjectUrl>
        <PackageLicenseExpression>Apache-2.0</PackageLicenseExpression>
        <Copyright>Copyright © 2018-$([System.DateTime]::Now.ToString('yyyy')) - Morten Nielsen, Alan Singfield</Copyright>
        <PackageId>alansingfield.Microsoft.SqlServer.Types</PackageId>
        <PackageReleaseNotes>Specific version for Microsoft.Data.SqlClient 5.0.0 onwards</PackageReleaseNotes>
        <AllowedOutputExtensionsInPackageBuildOutputFolder>$(AllowedOutputExtensionsInPackageBuildOutputFolder);.pdb</AllowedOutputExtensionsInPackageBuildOutputFolder>
        <PackageOutputPath Condition="$(Configuration.Contains(&quot;Debug&quot;))">..\..\artifacts\NuGet\Debug\</PackageOutputPath>
        <PackageOutputPath Condition="$(Configuration.Contains(&quot;Release&quot;))">..\..\artifacts\NuGet\Release\</PackageOutputPath>
        <PackageReadmeFile>README.md</PackageReadmeFile>
    </PropertyGroup>
    
    <PropertyGroup Label="Package Validation">
        <EnablePackageValidation>false</EnablePackageValidation>
        <PackageValidationBaselineVersion>3.5.0</PackageValidationBaselineVersion>
        <!-- <PackageValidationBaselineVersion Condition="'$(IsMSv4Build)'=='true'">2.4.0</PackageValidationBaselineVersion> -->

        <!-- When updating this, make sure to delete PackageValidationSuppression.txt files -->
        <GenerateCompatibilitySuppressionFile>false</GenerateCompatibilitySuppressionFile>
        <!-- Set to true to generate suppresion files used to ignore _intended_ breaking changes. Should never be checked in true -->
        <CompatibilitySuppressionFilePath Condition="('$(GenerateCompatibilitySuppressionFile)'=='true') OR Exists('$(MSBuildProjectDirectory)\PackageValidationSuppression.txt')">PackageValidationSuppression.txt</CompatibilitySuppressionFilePath>
    </PropertyGroup>

    <ItemGroup>
      <PackageReference Include="Microsoft.Data.SqlClient">
        <Version>5.0.0</Version>
      </PackageReference>
      <PackageReference Include="Microsoft.SqlServer.Server">
        <Version>1.0.0</Version>
      </PackageReference>
    </ItemGroup>
    <ItemGroup>
      <PackageReference Include="Microsoft.SourceLink.GitHub" Version="1.0.0" PrivateAssets="All" />
      <PackageReference Include="System.Memory" Version="4.5.4" />
      <None Include="README.md" Pack="true" PackagePath="\"/>
    </ItemGroup>

  <Target Name="SignAssemblies" Condition="Exists($(CertificatePath)) AND '$(CertificatePassword)'!=''" BeforeTargets="CopyFilesToOutputDirectory" DependsOnTargets="ComputeIntermediateSatelliteAssemblies"> 
    <PropertyGroup>
      <SignToolPath>$(ProgramFiles)\Windows Kits\10\bin\x64\signtool.exe</SignToolPath>
      <SignToolPath Condition="!Exists($(SignToolPath))">$(ProgramFiles)\Windows Kits\10\bin\10.0.22000.0\x64\signtool.exe</SignToolPath>
      <SignToolPath Condition="!Exists($(SignToolPath))">$(ProgramFiles)\Windows Kits\10\bin\10.0.19041.0\x64\signtool.exe</SignToolPath>
      <SignToolPath Condition="!Exists($(SignToolPath))">$(ProgramFiles)\Windows Kits\10\bin\10.0.18362.0\x64\signtool.exe</SignToolPath>
      <SignToolPath Condition="!Exists($(SignToolPath))">$(ProgramFiles)\Windows Kits\10\bin\10.0.17134.0\x64\signtool.exe</SignToolPath>
      <SignToolPath Condition="!Exists($(SignToolPath))">$(WindowsSDK80Path)bin\x64\signtool.exe</SignToolPath>
      <SignToolPath Condition="!Exists($(SignToolPath))">signtool.exe</SignToolPath> <!-- fallback to use PATH environment -->  
    </PropertyGroup>
    <ItemGroup>
      <FilesToSign Include="@(IntermediateAssembly)" />
      <FilesToSign Include="@(IntermediateRefAssembly)" />
      <FilesToSign Include="@(IntermediateSatelliteAssembliesWithTargetPath)" />
      <FilesToSignFiltered Include="@(FilesToSign)" Condition="Exists(%(FilesToSign.Identity))" />
    </ItemGroup>
    <Exec Condition="'@(FilesToSignFiltered->Count())' > 0" Command="&quot;$(SignToolPath)&quot; sign /v /fd SHA1 /f &quot;$(CertificatePath)&quot; /p &quot;$(CertificatePassword)&quot; /tr http://timestamp.digicert.com /td SHA1 &quot;%(FilesToSignFiltered.Identity)&quot;"
          WorkingDirectory="$(ProjectDir)" EchoOff="true" />
    <Exec Condition="'@(FilesToSignFiltered->Count())' > 0" Command="&quot;$(SignToolPath)&quot; sign /v /as /d &quot;Authorization Summary&quot; /fd SHA256 /f &quot;$(CertificatePath)&quot; /p &quot;$(CertificatePassword)&quot; /tr http://timestamp.digicert.com /td SHA256 &quot;%(FilesToSignFiltered.Identity)&quot;"
          WorkingDirectory="$(ProjectDir)" EchoOff="true" />
  </Target>

</Project>
